/*
 * Copyright 2023 Thoughtworks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

private static String xmlTemplate(gocdPlugin, version) {
  def targetOsSnippet = ""

  if (gocdPlugin.targetOs != null && !gocdPlugin.targetOs.isEmpty()) {
    String values = gocdPlugin.targetOs.collect({eachTargetOs -> "<value>${eachTargetOs}</value>"}).join("\n${' ' * 10}")
    targetOsSnippet = """<target-os>
          ${values}
        </target-os>"""
  }

  return """
    <!--
      ~ Copyright ${java.time.Year.now().getValue()} ${gocdPlugin.vendorName}
      ~
      ~ Licensed under the Apache License, Version 2.0 (the "License");
      ~ you may not use this file except in compliance with the License.
      ~ You may obtain a copy of the License at
      ~
      ~     http://www.apache.org/licenses/LICENSE-2.0
      ~
      ~ Unless required by applicable law or agreed to in writing, software
      ~ distributed under the License is distributed on an "AS IS" BASIS,
      ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      ~ See the License for the specific language governing permissions and
      ~ limitations under the License.
      -->

    <go-plugin id="${gocdPlugin.id}" version="1">
      <about>
        <name>${gocdPlugin.name}</name>
        <version>${version}</version>
        <target-go-version>${gocdPlugin.goCdVersion}</target-go-version>
        <description>${gocdPlugin.description}</description>
        <vendor>
          <name>${gocdPlugin.vendorName}</name>
          <url>${gocdPlugin.vendorUrl}</url>
        </vendor>
        ${targetOsSnippet}
      </about>
    </go-plugin>
    """.stripIndent().trim()
}

private static String pluginProperties(gocdPlugin, version) {
  return """
    #
    # Copyright ${java.time.Year.now().getValue()} ${gocdPlugin.vendorName}
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.
    #

    id=${gocdPlugin.id}
    name=${gocdPlugin.name}
    version=${version}
    goCdVersion=${gocdPlugin.goCdVersion}
    description=${gocdPlugin.description}
    vendorName=${gocdPlugin.vendorName}
    vendorUrl=${gocdPlugin.vendorUrl}
  """.stripIndent().trim()
}

interface InjectedExecOps {
    @Inject //@javax.inject.Inject
    ExecOperations getExecOps()
}

project.afterEvaluate {
  project.gocdPlugin.pluginProject.with { Project pluginProject ->
    if (pluginProject == null) return

    def generatedResourcesOutput = pluginProject.file("src/main/resources-generated")

    pluginProject.sourceSets {
      main {
        resources {
          output.dir generatedResourcesOutput, builtBy: 'generateResources'
          srcDirs += generatedResourcesOutput
        }
      }

      test {
        java {
          runtimeClasspath += configurations.compileClasspath
        }
      }

      def generateResources = pluginProject.tasks.register('generateResources') { thisTask ->
        def injected = project.objects.newInstance(InjectedExecOps)
        thisTask.outputs.upToDateWhen {false}
        outputs.dir(generatedResourcesOutput)

        doFirst {
          injected.execOps.exec {
            commandLine 'rm', '-rf', generatedResourcesOutput
          }
          generatedResourcesOutput.mkdirs()

          new File(generatedResourcesOutput, "plugin.xml").setText(xmlTemplate(pluginProject.gocdPlugin, pluginProject.version), "utf-8")
          new File(generatedResourcesOutput, "plugin.properties").setText(pluginProperties(pluginProject.gocdPlugin, pluginProject.version), "utf-8")
        }
      }

      pluginProject.tasks.named('processResources') {
        dependsOn generateResources
      }
    }
  }
}
