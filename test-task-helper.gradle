/*
 * Copyright 2023 Thoughtworks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

 class TestHelperANSI {
  static Map<String, String> COLOR = [
    ANSI_BOLD_WHITE: "\u001B[0;1m",
    ANSI_RESET     : "\u001B[0m",
    ANSI_RED       : "\u001B[31m",
    ANSI_GREEN     : "\u001B[32m",
    ANSI_YELLOW    : "\u001B[33m",
    ANSI_WHITE     : "\u001B[37m"
  ]

  static Map<String, String> SYMBOLS = [
    CHECK_MARK  : "\u2714",
    NEUTRAL_FACE: "\u0CA0_\u0CA0",
    X_MARK      : "\u2718"
  ]
}

allprojects {
  tasks.withType(Test) {
    maxParallelForks = 1

    testLogging {
      def previousFailed = false
      exceptionFormat = 'full'

      beforeSuite { suite ->
        if (suite.name.startsWith("Test Run") || suite.name.startsWith("Gradle Worker")) return

        if (suite.parent != null && suite.className != null) {
          println(TestHelperANSI.COLOR.ANSI_BOLD_WHITE + suite.name + TestHelperANSI.COLOR.ANSI_RESET)
        }
      }

      beforeTest {
        if (previousFailed) {
          System.err.println("")
        }
      }

      afterTest { descriptor, result ->
        previousFailed = false
        def executionTime = (result.endTime - result.startTime) / 1000
        println("    ${resultIndicator(result)}$TestHelperANSI.COLOR.ANSI_RESET $descriptor.name $TestHelperANSI.COLOR.ANSI_YELLOW($executionTime seconds)$TestHelperANSI.COLOR.ANSI_RESET")

        if (result.failedTestCount > 0) {
          previousFailed = true
          println('')
          println(result.exception)
        }
      }

      afterSuite { desc, result ->
        if (desc.parent != null && desc.className != null) {
          println("")
        }

        if (!desc.parent) { // will match the outermost suite
          def failStyle = TestHelperANSI.COLOR.ANSI_RED
          def skipStyle = TestHelperANSI.COLOR.ANSI_YELLOW
          def summaryStyle = summaryStyle(result)

          if (result.failedTestCount > 0) {
            failStyle = TestHelperANSI.COLOR.ANSI_RED
          }
          if (result.skippedTestCount > 0) {
            skipStyle = TestHelperANSI.COLOR.ANSI_YELLOW
          }


          println("--------------------------------------------------------------------------")
          println("Results: $summaryStyle$result.resultType$TestHelperANSI.COLOR.ANSI_RESET ($result.testCount tests, $TestHelperANSI.COLOR.ANSI_GREEN$result.successfulTestCount passed$TestHelperANSI.COLOR.ANSI_RESET, $failStyle$result.failedTestCount failed$TestHelperANSI.COLOR.ANSI_RESET, $skipStyle$result.skippedTestCount skipped$TestHelperANSI.COLOR.ANSI_RESET)")
          println("--------------------------------------------------------------------------")
        }
      }
    }
  }
}

private String summaryStyle(result) {
  def summaryStyle = TestHelperANSI.COLOR.ANSI_WHITE
  switch (result.resultType) {
    case TestResult.ResultType.SUCCESS:
      summaryStyle = TestHelperANSI.COLOR.ANSI_GREEN
      break
    case TestResult.ResultType.FAILURE:
      summaryStyle = TestHelperANSI.COLOR.ANSI_RED
      break
  }
  summaryStyle
}

private String resultIndicator(result) {
  def indicator = TestHelperANSI.COLOR.ANSI_WHITE

  if (result.failedTestCount > 0) {
    indicator = TestHelperANSI.COLOR.ANSI_RED + TestHelperANSI.SYMBOLS.X_MARK
  } else if (result.skippedTestCount > 0) {
    indicator = TestHelperANSI.COLOR.ANSI_YELLOW + TestHelperANSI.SYMBOLS.NEUTRAL_FACE
  } else {
    indicator = TestHelperANSI.COLOR.ANSI_GREEN + TestHelperANSI.SYMBOLS.CHECK_MARK
  }
  indicator
}

